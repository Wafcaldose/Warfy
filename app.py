from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage,
    QuickReply, QuickReplyButton, MessageAction,
    FlexSendMessage, BubbleContainer, BoxComponent, TextComponent
)

import os

app = Flask(__name__)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å LINE Developer Console
LINE_CHANNEL_ACCESS_TOKEN = "hJrtsmcBM9LT0m0jEC6h4dbp0ZWek8DwJ77PW7hypvMbGNPnld0vtFiuUpb5dXB0oiKgDAVO6C3duZARQMiLggsUmKew7SA2MoPECS9gDFebh/W0fk6ITXbzgVD3WX6iCdpdPZfaRA54aQXeEU5ezwdB04t89/1O/w1cDnyilFU="
LINE_CHANNEL_SECRET = "b178fc8ba767114ad57ac6ab93c312ab"

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# Quick Reply ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏±‡∏î
quick_reply_buttons = QuickReply(
    items=[
        QuickReplyButton(action=MessageAction(label="‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", text="‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")),
        QuickReplyButton(action=MessageAction(label="‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö", text="‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö")),
        QuickReplyButton(action=MessageAction(label="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", text="35"))
    ]
)

# Flex Message builder (‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î Warfarin ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ)
def build_schedule_flex(dose_per_week, schedule_list):
    days = ['‡∏à', '‡∏≠', '‡∏û', '‡∏û‡∏§', '‡∏®', '‡∏™', '‡∏≠‡∏≤']

    def dose_to_tablet_text(dose):
        if dose in [1, 2, 4]:
            tablets = dose / 2
            tablet_text = "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÄ‡∏°‡πá‡∏î" if tablets == 0.5 else f"{tablets:.1f} ‡πÄ‡∏°‡πá‡∏î"
            return f"{dose} mg (2mg x {tablet_text})"
        elif dose in [1.5, 3, 4.5, 6]:
            tablets = dose / 3
            tablet_text = "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÄ‡∏°‡πá‡∏î" if tablets == 0.5 else f"{tablet_text} ‡πÄ‡∏°‡πá‡∏î"
            return f"{dose} mg (3mg x {tablet_text})"
        elif dose in [2.5, 5, 7.5, 10]:
            tablets = dose / 5
            tablet_text = "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÄ‡∏°‡πá‡∏î" if tablets == 0.5 else f"{tablet_text} ‡πÄ‡∏°‡πá‡∏î"
            return f"{dose} mg (5mg x {tablet_text})"
        else:
            return f"{dose} mg"

    items = [TextComponent(text=f"{days[i]}: {dose_to_tablet_text(schedule_list[i])}", size="md") for i in range(7)]

    summary = {"2mg": 0, "3mg": 0, "5mg": 0}
    for dose in schedule_list:
        if dose in [1, 2, 4]:
            summary["2mg"] += dose / 2
        elif dose in [1.5, 3, 4.5, 6]:
            summary["3mg"] += dose / 3
        elif dose in [2.5, 5, 7.5, 10]:
            summary["5mg"] += dose / 5

    summary_lines = [f"‡∏£‡∏ß‡∏°‡πÉ‡∏ä‡πâ {k}: {v:.1f} ‡πÄ‡∏°‡πá‡∏î/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå" for k, v in summary.items() if v > 0]
    summary_text = "\n" + "\n".join(summary_lines) if summary_lines else ""

    items.append(TextComponent(text=summary_text, wrap=True, margin="lg", size="sm", weight="bold"))

    bubble = BubbleContainer(
        body=BoxComponent(
            layout="vertical",
            contents=[
                TextComponent(text=f"üî≥ Warfarin {dose_per_week} mg/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", weight="bold", size="lg"),
                BoxComponent(
                    layout="vertical",
                    margin="md",
                    spacing="sm",
                    contents=items
                )
            ]
        )
    )

    return FlexSendMessage(alt_text="‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡∏≤ Warfarin", contents=bubble)

# --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô
def ask_for_appointment_date():
    return TemplateSendMessage(
        alt_text='‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î',
        template=ButtonsTemplate(
            title='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î',
            text='‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô',
            actions=[
                DatetimePickerAction(
                    label='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
                    data='action=select_date',
                    mode='date'
                )
            ]
        )
    )

# --- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç /callback
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

# --- ‡∏î‡∏±‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Text
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    text = event.message.text.strip()

    if text.lower() in ["‡πÄ‡∏£‡∏¥‡πà‡∏°", "start"]:
        reply = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        quick_mode = QuickReply(
            items=[
                QuickReplyButton(action=MessageAction(label="üß≤ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≤", text="mode:calc")),
                QuickReplyButton(action=MessageAction(label="üóì ‡πÉ‡∏ä‡πâ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏ô‡∏±‡∏î‡∏£‡∏±‡∏ö", text="mode:calendar"))
            ]
        )
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=reply, quick_reply=quick_mode)
        )
        return

    if text == "mode:calc":
        app.config[user_id] = {"mode": "calc"}
        reply = "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≤\n‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ Warfarin ‡πÄ‡∏ä‡πà‡∏ô 35 ‡∏´‡∏£‡∏∑‡∏≠ 36.5"
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))
        return

    if text == "mode:calendar":
        app.config[user_id] = {"mode": "calendar", "step": "wait_date"}
        message = ask_for_appointment_date()
        line_bot_api.reply_message(event.reply_token, message)
        return

    session = app.config.get(user_id, {})
    try:
        number = float(text)
        if number > 70:
            reply = "‚ö†Ô∏è ‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 70 mg/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå\n‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏¢‡∏≤ Warfarin ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"
        elif number < 7.0:
            reply = "‚ö†Ô∏è ‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏≠ 7 mg/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå\n(‡πÄ‡∏ä‡πà‡∏ô 1.0 mg/‡∏ß‡∏±‡∏ô √ó 7 ‡∏ß‡∏±‡∏ô)"
        else:
            schedule = generate_schedule(number)
            if schedule:
                flex_msg = build_schedule_flex(number, schedule)
                line_bot_api.reply_message(event.reply_token, flex_msg)
                return
            else:
                reply = "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏¢‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç"
    except:
        reply = "‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏Ç‡∏ô‡∏≤‡∏î‡∏¢‡∏≤ Warfarin ‡πÄ‡∏ä‡πà‡∏ô 35 ‡∏´‡∏£‡∏∑‡∏≠ 36.5"

    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=reply, quick_reply=quick_reply_buttons)
    )

# --- ‡∏î‡∏±‡∏Å Postback ‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
@handler.add(PostbackEvent)
def handle_postback(event):
    data = event.postback.data
    if data.startswith('action=select_date'):
        selected_date = event.postback.params.get('date')
        if selected_date:
            reply = f"üìÖ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {selected_date} ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))

# ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ä‡πá‡∏Å bot ‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
@app.route("/", methods=["GET"])
def index():
    return "Warfy Bot is running!"

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    app.run(debug=True, host="0.0.0.0", port=port)